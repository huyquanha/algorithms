The compare tree must have at least (N!/f1!f2!...fk!) leaves because these are the number of
permutations.

=> number of leaves >=  N!/(f1!f2!...fk!) (1)

On the other hand, a binary tree with height h will have at most 2^h leaves (if it is a complete binary tree)

=> number of leaves <= 2^h (2)

From (1) and (2) we have:

2^h >= N!/(f1!f2!...fk!)

<=> h >= log(N!) - (lgf1! + lgf2! + lgf3! + ... + lgfk!)
<=> h >= NlogN - (f1lgf1 + f2lgf2 + f3lgf3 + ... + fklgfk)
<=> h >= (f1 + f2 + f3 + ... + fk)lgN - (f1lgf1 + f2lgf2 + f3lgf3 + ... + fklgfk)
<=> h >= -f1(lgf1 - lgN) - f2(lgf2 - lgN) - f3(lgf3 - lgN) - ... - fk(lgfk - lgN)
<=> h >= -f1lgp1 - f2lgp2 - f3lgp3 - ... - fklgpk
<=> h >= N * -(p1lgp1 + p2lgp2 + p3lgp3 + ... + pklgpk)
<=> h >= NH

h, which is the height of the tree, is the worst-case number of compares needed to sort the array

From this we can see that no compare-based algorithm can guarantee to sort N items with fewer than NH compares
