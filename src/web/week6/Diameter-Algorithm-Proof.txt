Problem: Given a connected, acycle undirected graph G, find the diameter of the graph (the longest
simple path between any 2 vertices)

Algorithm:
    - Start at any root, run BFS to get the vertex x furthest away from root. x should be one end of the longest path
    - Run a second BFS from x to get the other end of the longest path

Proof
    - The crucial point is the proving x is one end of the longest path. As long as this is true, the second BFS to find the other end
    is straightforward
    - Let's assume there's another path u-v that is the longest path, but neither u nor v == x
    - Because the graph is connected, we can also get to u and v from root => there exists a vertex h in the path u-v
    that is closest to root (h could even be root itself).
    - dist(u,v) = dist(h,u) + dist(h,v)
    - dist(root,u) = dist(root,h) + dist(h,u) <= dist(root,x)
    - dist(root,v) = dist(root,h) + dist(h,v) <= dist(root,x)

    => dist(root,u) + dist(root,x) >= dist(root,u) + dist(root,h) + dist(h,v) = 2 * dist(root,h) + dist(h,u) + dist(h,v) = 2 * dist(root,h) + dist(u,v)

    => even if dist(root,h) == 0 (h is root), a path that ends is root is going to be at least as long as dist(u,v)


Problem: Given the previous graph, find the center (the vertex where the maximum distance to any other vertex is minimized)

Algorithm:
    - This should be the middle vertex in the longest path that we discovered by the previous algorithm (similar to how a center
    of a circle is the middle of the diameter). If the number of vertices is even, there won't be a middle vertex, in that case
    it could be either of the 2 "middle" vertices

Proof
    - Let's call the longest path we discover by the previous algorithm u-v. To find a vertex that minimizes the maximum distance to any vertex
    is equivalent to finding a vertex that minimizes the distance to u and v. We will prove this by contradiction
        - First and foremost, we need to realize the fact that any vertex that connects to u or v must do so by either: being on the path
        u-v itself, or has a connection to a vertex h on u-v. There cannot be a disjoint path from x to u or v directly without sharing parts of u-v,
        because if there is such a path, we could extend u-v to include the path x-u or x-v => u-v is no longer the longest path => contradict.
        - With this fact in mind, it's now easy to see that:
            - If x is on u-v, dist(x, anyOtherVertex) <= Math.max(dist(x,u), dist(x,v)). It's easy to see that this is true for any other vertex y on
            u-v since dist(x,y) <= dist(x,u) or dist(x,v), depending on which side y is on. For a vertex y that is not on u-v, without loss of generality,
            let's assume dist(x,u) > dist(x,v). If dist(x,y) > dist(x,u) => dist(x,y) + dist(x,v) > dist(x,u) + dist(x,v) = dist(u,v) => this contradicts
            with the fact that u-v is the longest path in the graph => dist(x,y) <= dist(x,u)
            - If x is not on u-v, x has to be connected to u and v via a vertex h on u-v. x cannot has a disjoint path to any other vertex on u-v, because
            that would form a cycle between x,h and that vertex => dist(x,u) = dist(x,h) + dist(h,u) > dist(h,u)
                                                                   dist(x,v) = dist(x,h) + dist(h,v) > dist(h,v)
                 - Similarly, we can easily see that if we find a vertex y such that dist(x,y) > dist(x,u) (assuming dist(x,u) > dist(x,v)),
                 dist(x,y) + dist(x,v) > dist(x,u) + dist(x,v) > dist(u,v) => wrong because u-v is the longest path in the graph

            - Combining both of these cases, we have proved that for any vertex x in the graph, dist(x, anyOtherVertex) <= Math.max(dist(x,u), dist(x,v))
            with u-v being the longest path in the graph.

        - We now reduce the problem to finding x such that the distance from x to u and v is minimized. It's easy to see that if x is not on u-v
        , since x has to be connected to a vertex h on u-v, dist(x,u) = dist(x,h) + dist(h,u) > dist(h, u) and dist(x,v) = dist(x,h) + dist(h, v) > dist(h,v)
        => we can always find another vertex h on u-v that has a smaller distance to u and v than x
        => the vertex we are looking for must be on u-v.
        - To minimize Math.max(dist(x,u), dist(x,v)) when x is on u-v, we have to choose x to be the middle, or if the middle is not available,
        one of the 2 "middle" vertices.