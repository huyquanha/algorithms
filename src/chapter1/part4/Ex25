2*sqrt(N)
- Divide the N-story building into sqrt(N) parts, each with a length of sqrt(N)
=> total length is sqrt(N) * sqrt(N) = N
- First try sqrt(N)
    - If the egg's broken => F <= sqrt(N)
        - Because now we only have one egg left, the only way we can be sure
        which floor is F is by trying each floor from lowest to highest 1 -> sqrt(N)-1
        - The first floor for which the second egg is broken will be F
        => total tries: 1 + sqrt(N) -1 = sqrt(N)
    - If the egg is not broken, try 2*sqrt(N)
        - If the egg is still not broken, try 3*sqrt(N)
           ...
           - Finally try sqrt(N) * sqrt(N), which is N itself
=> following the previous process, we can see that the worst case will be that we have
to go all the way to Nth floor => sqrt(N) tries for the first egg + sqrt(N) tries
for the second egg (try every possible floor for each floor in a section)
=> 2*sqrt(N) in the worst case

c * sqrt(F)
- Hint: 1 + 2 + 3 + ... + k ~ (1/2 * k^2)
- Assume F is between S(k-1) = (1+2+3+...+(k-1)) and S(k) = (1+2+3+...+k) => S(k-1) < F <= S(k)
- We start throwing the first egg at floor 1, then floor 3 (1+2), then floor 6 (1+2+3)...
all the way to k-1. The egg is still not broken since F > S(k-1)
- The next time we try at k, the first egg is broken since F <= S(k)
- With one egg remaining we will try all the floor from low to high from S(k-1)+1 -> S(k)-1
- The first floor that the egg is broken will be F
- Conclusion
    - With the first egg, we have to try k times
    - With the second egg, we have to try at worst k times as well.
    - At worst the total trial is 2k
    - Since S(k-1) < F <= S(k) and S(k-1) ~ (k-1)^2/2 and S(k) ~ k^2/2 => F ~ k^2/2
    => k ~ sqrt(2F) ~ sqrt(2) * sqrt(F)
    => 2k ~ 2*sqrt(2)*sqrt(F) => ~c*sqrt(F) with c = 2*sqrt(2)

