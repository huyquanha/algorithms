a) Accumulator: 16 bytes object overhead + 8 bytes double + 4 bytes int + 4 bytes pad = 32bytes
b) Transaction: 16 bytes overhead + 8 bytes reference to String
+ 8 bytes ref to Date + 8 bytes double = 40 bytes
c) FixedCapacityStackOfStrings
- 24 bytes array overhead (16 bytes obj overhead + 4 bytes length + 4 bytes pad)
- 4 bytes for int N
- because this array of String is an array of references,
we only count the entries that actually contains a reference to a String, not count
all C entries (some of which may be null)
- For array of primitive values however, we have to count all of them because
when we initialize an array, we set a default value for all entries.
- In this case, N items => 8N bytes for references
- Each String uses:
    - 16 bytes obj overhead
    - ref to character array 8 bytes
    - offset to character array (int) => 4 bytes
    - the string length (int) => 4 bytes
    - the pre-computed hashcode (int) => 4 bytes
    - 4 bytes pad
    => each String uses 40 bytes
    => N strings use 40N bytes
- 4 bytes padding

=> total memory for FixedCapacityStackOfStrings: 24 + 4 + 8N + 40N + 4 = 32 + 48N

d) Point2D
- 16 bytes obj overhead
- 8 bytes for each double
=> 24 bytes
Note: we don't count the static final variables because they belong to the class, not
the object

e) Interval1D Same as above
f) Interval2D
- 16bytes obj overhead
- 8 bytes for each reference to Interval1D
=> 32 bytes in total

g) Double
- 16 bytes obj overhead
- 8 bytes for the wrapped double
=> 24 bytes in total