- Linked List
    - Pushing as int: a Node requires 16 bytes obj overhead, 4 bytes for the int, and 8 bytes reference to the next Node, and
    4 byte padding => 32 bytes. N nodes => 32N
    - Pusing as Integer: a Node reuqires 16 bytes obj overhead, 8 bytes reference to an Integer, 8 bytes reference to next Node
    => 32 bytes. an Integer has 16 bytes obj overhead, 4 bytes for the int itself and 4 bytes padding => 24 bytes
    - The stack also needs 16 bytes obj overhead, 4 bytes for the count, and
    8 bytes for the reference to the first Node in the linked list, adn 4 bytes padding
    => in total: 32 bytes + 56N => ~ 56N (the book is wrong because we are using static nested Node class => we can avoid
    8 bytes overhead for each node => we save 8N bytes)

- Resizing Array
    - Pushing as int: the array size can be at least N (so it can contain N elements) and can be at most 4N (because with
    resizing implementation, the number of elements in the array never falls below 1/4 the array size) => the space needed
    is between 4N and 16N (4 bytes per each int). We also have the 4 bytes for the int count, and 8 bytes reference to the array,
    16 bytes stack obj overhead and 4 bytes padding => 32 bytes + 4N -> 16N => ~4N -> ~16N
    - Pusing as Integer: again the array size is in the range [N, 4N]. The array contains the references to the Integers,
    8 bytes reference for each => [8N, 32N]. Each Integer is 24 bytes => add 24N we have [32N, 56N].