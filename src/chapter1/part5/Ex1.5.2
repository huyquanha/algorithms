QuickUnion
N = 10
idx:  0 1 2 3 4 5 6 7 8 9
id[]: 0 1 2 3 4 5 6 7 8 9

- 9 0
    - find()
        - find(9) = 9 (1 arr acc)
        - find(0) = 0 (1 arr acc)
    - union()
        - 2 arr acc for 2 find()
        - 1 arr acc to link 9 to 0 => id[9] = 0
idx:  0 1 2 3 4 5 6 7 8 9
id[]: 0 1 2 3 4 5 6 7 8 0

0 1 2 3 4 5 6 7 8
|
9

- 3 4
    - find()
        - find(3) = 3 (1 arr acc)
        - find(4) = 4 (1 arr acc)
    - union()
        - 2 arr acc for find()
        - 1 arr acc link 3 to 4 => id[3] = 4
idx:  0 1 2 3 4 5 6 7 8 9
id[]: 0 1 2 4 4 5 6 7 8 0

0 1 2 4 5 6 7 8
|     |
9     3

- 5 8
     - find(): same, 2 arr acc
     - union(); 2 for find(), 1 for link 5 to 8 => id[5] = 8
idx:  0 1 2 3 4 5 6 7 8 9
id[]: 0 1 2 4 4 8 6 7 8 0

0 1 2 4 6 7 8
|     |     |
9     3     5

- 7 2
    - find(): 2
    - union(): 2 for find(), 1 for link 7 to 2 => id[7] = 2
idx:  0 1 2 3 4 5 6 7 8 9
id[]: 0 1 2 4 4 8 6 2 8 0

0 1 2 4 6 8
|   | |   |
9   7 3   5

- 2 1
    - find(2) = 2 (1 arr acc), find(1) = 1 (1 arr acc)
    - union(): 2 for find(), 1 for link 2 to 1 => id[2] = 1
idx:  0 1 2 3 4 5 6 7 8 9
id[]: 0 1 1 4 4 8 6 2 8 0

0 1 4 6 8
| | |   |
9 2 3   5
  |
  7

- 5 7
    - find(5) = 8 (3 arr acc), find(7) = 1 (5 arr acc) => 8 in total
    - union(): 8 arr acc for find(), 1 arr acc to link 8 to 1 => id[8] = 1
idx:  0 1 2 3 4 5 6 7 8 9
id[]: 0 1 1 4 4 8 6 2 1 0

0   1     4 6
|   |\    |
9   2 8   3
    | |
    7 5

- 0 3
    - find(0) = 0 (1 arr acc), find(3) = 4 (3 arr acc) => 4 arr acc total
    - union(): 4 for find(), 1 for link 0 to 4 => id[0] = 4
idx:  0 1 2 3 4 5 6 7 8 9
id[]: 4 1 1 4 4 8 6 2 1 0

1     4     6
|\    |\
2 8   3 0
| |     |
7 5     9

- 4 2
    - find(4) = 4 (1 arr acc), find(2) = 1 (3 arr acc) => 4 arr acc total
    - union(): 4 for find(), 1 for link 4 to 1 => id[4] = 1
idx:  0 1 2 3 4 5 6 7 8 9
id[]: 4 1 1 4 1 8 6 2 1 0

1-----4     6
|\    |\
2 8   3 0
| |     |
7 5     9

