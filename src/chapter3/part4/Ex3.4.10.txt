E (5)
A (1)
S (19)
Y (25)
Q (17)
U (21)
T (20)
I (9)
O (15)
N (14)

M = 16
hash(Q) = 11 but A is already there => Q to 12
hash(U) = 7 but E is already there => U to 8
hash(T) = 12 but Q already there => T to 13
hash(I) = 3, Y already there => I to 4
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
  S   Y I O   E U   N  A  Q  T

M = 10. Just by looking at M, which equals N (the number of keys we want to insert), we can predict this table
is going to be full after all keys are inserted, no matter if the keys hash to the same index or different index,
because this is a linear probing table to it will be pushed to the next index

hash(Y) = 5 but E there => Y to 6
hash(U) = 1 but A there => U to 2
hash(I) = 9 but S there => wrap around to 0. T there => 1. A there => 2. U there => 3 (we can see it's significantly longer probes right here)
hash(O) = 5 but E there => 6 but Y there => 7 but Q there => 8
0 1 2 3 4 5 6 7 8 9
T A U I N  E Y Q O S

