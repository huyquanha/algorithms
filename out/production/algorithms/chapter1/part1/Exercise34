- Print the maximum and minimum numbers.
    - As a filter
    - Only keep 2 variables min and max
    - For every next number if it < min, set min as that number
    - If it > max, set max as that number

- Print the median of the numbers
    - Might need to save all the numbers
    - Sort them
    - Get the number that exactly sits in middle of the array

- Print the k th smallest value, for k less than 100.
    - create an array of 100 elements to keep the 100 smallest numbers in sorted order
    - When a new number is received:
        - If the size of the array is small (<10) for example, we can compare the new item
        with each previous items to find out the correct position to insert this new item in
        - Moves all items after the new item one place to the right, and put the new item
        in the correct position
        - If the size of the array is large, use binary search rank() method to find the
        correct position for the new item, move all items after it to the right, and insert the new one

- Print the sum of the squares of the numbers.
    - just keep a variable sum, and sum += new number ^2 every time

- Print the average of N numbers
    - Keep 2 variables average and count (the numbers encountered so far)
    - The sum so far would be average* count
    - When a new number is received, the new sum would be average*count + new_num
    - The new count would be count+1
    - The new average would be : (average*count + new_num) / (count+1)

- Print the percentage of numbers greater than the average.
    - Will need to keep the whole array
    - The average can be calculated every time a new number is received like the above
    - then sort the array, and do a binary search rank() on the sorted array to find
    the position of the average.
    - then take the number of elements greater than average/ total to get the percentage

- Print the N numbers in increasing order.
    - Might need to use the whole array to store all N elements
    - sort and print

- Print the N numbers in random order.
    - also need the whole array, then do a random shuffling
