We can use either Selection Sort, Insertion Sort or Shell Sort. Don't worry too much about the different ranks and suits,
those can all be implemented as part of compareTo(). We just need to know that when we flip 2 cards up for compare, we have a set
of well-defined rules that let us know which one is smaller.
- With Selection Sort
    - Mark the first card as min. Flip up the min card and 2nd, then 3rd, 4th,..Nth card. At each iteration, if the other card
    is smaller than the min card, move the min marker (or memorize the new position) to that smaller card, then continuing compare the min
    card with whatever cards is left
    - At the end, swap the card with min marker with the first card
    - Continue the same steps, starting with 2nd card

- With Insertion Sort
    - Look at the 2nd card and 1st card. If 2nd < 1st, switch them
    - Look at 3rd and 2nd, if 3rd < 2nd switch them. Then look at 2nd and 1st and if 2nd < 1st switch them. Otherwise if 3rd >= 2nd
    then we can stop right away without switching since 3rd is already in order.
    - Continue on until you get to the last card (Nth), compare with N-1 th,...and switch if necessary until you hit a card
    that is smaller than or equal to itself.

- With Shell Sort
    - With 52 cards, we can develop an increment sequence of 1,4,13,40
    - Starting with h = 40, we look at card 40 (0-indexed). Compare it with card[0] just like with insertion sort
    and exchange if needed. Then look at h = 41 and compare with 1,...until you reach 51 (0 indexed so 51 is the last card)
    - With h = 13, we look at card 13 first, compare with 0,...Then look at card 26, compare with card 13, if c[26] < c[13]
    switch, and continue comparing new c[13] with c[0]....
    - With h = 4,..
    - With h = 1, basically we just do another round of insertion sort, but now it is much easier than the array is already partially ordered