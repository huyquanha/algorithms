2lgN is when it is a binary heap. N elements => 2NlgN

When it is a t-ary heap, each sink operation will take t compares to find the largest of t items
. Also, the path length from the root to a leave is lg(t) N
=> the cost (in compares) of N sink operations is: t * N * lg(t) N

lg(t) N = x => t^x = N
lgt = y => 2 ^ y = t => y = lgt
=> N = (2^y)^x = 2^(xy) => xy = lgN
=> x = lgN/lgt

=> the cost is: t * N * lgN/lgt = t/lgt * N * lgN

We can see that with t = 2, 2/lg2 = 2/1 = 2
3/lg3 = 1.89 < 2
4/lg4 = 2
5/lg5 = 2.15
6/lg6 = 2.32
=> we can see that as t increases, from 4 upwards, t/lgt tends to go up. We are looking for the minimum, which is at 3/lg3
=> t=3 gives us the best coefficient.
